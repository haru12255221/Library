services:
  app:
    build:
      context: ../
      dockerfile: Dockerfile
    container_name: library-prod-app
    restart: unless-stopped
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_URL=https://vantanlib.com
      - DB_HOST=db
      - DB_DATABASE=${DB_DATABASE:-library_production}
      - DB_USERNAME=${DB_USERNAME:-library_user}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - QUEUE_CONNECTION=redis
    volumes:
      - ../:/workdir
      - /workdir/laravel-app/node_modules  # Exclude node_modules
      - /workdir/laravel-app/vendor       # Exclude vendor
    depends_on:
      - db
      - redis
    networks:
      - library-prod-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: library-prod-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/default.prod.conf:/etc/nginx/conf.d/default.conf
      - certbot_conf:/etc/letsencrypt
      - certbot_www:/var/www/certbot
      - ../:/workdir
    depends_on:
      - app
    networks:
      - library-prod-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  certbot:
    image: certbot/certbot:latest
    container_name: library-prod-certbot
    volumes:
      - certbot_conf:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    environment:
      - CERTBOT_EMAIL=admin@vantanlib.com
    command: |
      sh -c "
      if [ ! -f /etc/letsencrypt/live/vantanlib.com/fullchain.pem ]; then
        certbot certonly --webroot 
        -w /var/www/certbot 
        --email admin@vantanlib.com 
        -d vantanlib.com 
        -d www.vantanlib.com
        --agree-tos 
        --no-eff-email
        --non-interactive
        --rsa-key-size 4096
        --verbose
      else
        echo 'Certificate already exists, skipping initial creation'
      fi
      "
    networks:
      - library-prod-network

  db:
    image: mysql:8.3
    container_name: library-prod-db
    restart: unless-stopped
    volumes:
      - mysql_data_prod:/var/lib/mysql
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf:ro
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-secure_root_password}
      MYSQL_DATABASE: ${DB_DATABASE:-library_production}
      MYSQL_USER: ${DB_USERNAME:-library_user}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    networks:
      - library-prod-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD:-secure_root_password}"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: library-prod-redis
    restart: unless-stopped
    volumes:
      - redis_data_prod:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-secure_redis_password}
    networks:
      - library-prod-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  library-prod-network:
    driver: bridge

volumes:
  mysql_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./mysql_data_prod
  redis_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./redis_data_prod
  certbot_conf:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./docker/certbot/conf
  certbot_www:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./docker/certbot/www